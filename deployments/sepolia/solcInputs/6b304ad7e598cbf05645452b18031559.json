{
  "language": "Solidity",
  "sources": {
    "contracts/BhimToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\ncontract BhimToken {\r\n    mapping(address => uint) private s_balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private s_allowances;\r\n\r\n    uint256 private s_totalSupply;\r\n\r\n    string private i_name;\r\n    string private i_symbol;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {\r\n        i_name = _name;\r\n        i_symbol = _symbol;\r\n        _mint(msg.sender, _initialSupply);\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function name() public view returns (string memory) {\r\n        return i_name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return i_symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return s_totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return s_balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return s_allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) internal {\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = s_balances[_from];\r\n        require(fromBalance >= _amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        // To disbale underflow and overflow check as we have already did it ourselves\r\n        unchecked {\r\n            s_balances[_from] -= _amount;\r\n            s_balances[_to] += _amount;\r\n        }\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        s_allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _spendAllowance(address _owner, address _spender, uint256 _amount) internal {\r\n        uint256 _currentAllowances = s_allowances[_owner][_spender];\r\n        if (_currentAllowances != type(uint256).max) {\r\n            require(_currentAllowances >= _amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(_owner, _spender, _currentAllowances - _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _mint(address _account, uint256 _amount) internal virtual {\r\n        require(_account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        s_totalSupply += _amount;\r\n\r\n        unchecked {\r\n            s_balances[_account] += _amount;\r\n        }\r\n\r\n        emit Transfer(address(0), _account, _amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}